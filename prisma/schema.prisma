generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  carts        Cart[]
  orders       Order[]
  notifications Notification[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  categoryId  Int
  imageUrl    String[]
  createdAt   DateTime @default(now())

  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  products    Product[]
}     

model Cart {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime  @default(now())

  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int      @default(1)
}

model Order {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  totalPrice Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime  @default(now())

  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int      
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Payment {
  id             Int      @id @default(autoincrement())
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        Int      @unique
  paymentStatus  PaymentStatus @default(PENDING)
  amount         Float
  paymentMethod  String
  createdAt      DateTime  @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
